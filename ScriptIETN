/**
 * @license MIT
 * No cal recarregar, sinò que es poden executar directament des del Editor de Scripts
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createAddonMenu()
    .addItem('Informes > Generar copies', 'cloneGoogleSheet')
    .addItem('Informes > Imprimir per separat', 'exportAllSheetsAsSeparatePDFs')
    .addItem('Enviar emails', 'sendEmails')
    //.addItem('Export all sheets', 'exportAsPDF')
    //.addItem('Export current sheet', 'exportCurrentSheetAsPDF')
    //.addItem('Export selected area', 'exportPartAsPDF')
    //.addItem('Export predefined area', 'exportNamedRangesAsPDF')
    .addToUi()
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fa copies a partir d'una taula de noms

function cloneGoogleSheet()
{
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet_alumnes = ss.getSheetByName('Alumnes');
 
  for(i = 1; i <= sheet_alumnes.getLastRow(); i++)
  {
    var separate_name = [{}];
    var complete_name = String(sheet_alumnes.getRange(i, 1).getValue());
    separate_name = complete_name.split(" ");
    var name = separate_name[0];
    var new_name = name;
    if(separate_name.length == 2)
    {
      new_name = new_name + " " + String(separate_name[1]).toUpperCase();
    }
    else if(separate_name.length == 3)
    {
      new_name = new_name + " " +separate_name[1].toUpperCase() + " " +separate_name[2].toUpperCase();
    }
    else if(separate_name.length == 4)
    {
      name = name + " " + separate_name[1];
      new_name = name;
      new_name = new_name + " " +separate_name[2].toUpperCase() + " " +separate_name[3].toUpperCase();
    }
   
    var sheet = ss.getSheetByName('Plantilla').copyTo(ss);
    sheet.setName(name);
    sheet.getRange('A1').setValue(new_name);
  }
}

/*
function deleteRedundantSheets()
{
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   var sheet = ss.getSheets()[0];
   var sheets = SpreadsheetApp.getActiveSpreadsheet().getSheets();

   for (i = 0; i < sheets.length; i++)
   {
     if(sheets[i].getSheetName() != "Plantilla" && sheets[i].getSheetName() != "Alumnes")
     {
       ss.deleteSheet(ss.getSheetByName(sheets[i].getSheetName()));
     }
   }
}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Envia emails a partir d'una taula
//Primera fila és capçalera
//Primera columna és el email
//Segona columna és el missatge que vols enviar
//Revisar el "subject" al codi

function sendEmails() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var startRow = 2; // First row of data to process
  var numRows = 2; // Number of rows to process
  // Fetch the range of cells A2:B3
  var dataRange = sheet.getRange(startRow, 1, numRows, 2);
  // Fetch values for each row in the Range.
  var data = dataRange.getValues();
  for (var i in data) {
    var row = data[i];
    var emailAddress = row[0]; // First column
    var message = row[1]; // Second column
    var subject = 'Codi per tindre Filmin GRATIS';
    MailApp.sendEmail(emailAddress, subject, message);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Imprimir informes en PDF per separat

PropertiesService.getScriptProperties().setProperty('primercop', 'true');
//posar el número de full queda obert en el últim generat
PropertiesService.getScriptProperties().setProperty('seguirFull', '6');

// config @ onBlob
// per ajustar al contingut: fitw=true
// per a que surtin &gridlines=true

function _exportBlob(blob, fileName) {
  blob = blob.setName(fileName)
  var pdfFile = DriveApp.createFile(blob)
 
  // Display a modal dialog box with custom HtmlService content.
  const htmlOutput = HtmlService
    .createHtmlOutput('<p>Click to open <a href="' + pdfFile.getUrl() + '" target="_blank">' + fileName + '</a></p>')
    .setWidth(300)
    .setHeight(80)
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Export Successful')
}
function exportAsPDF() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet()
  var blob = _getAsBlob(spreadsheet.getUrl())
  _exportBlob(blob, spreadsheet.getName())
}
function _getAsBlob(url, sheet, range) {
  var rangeParam = ''
  var sheetParam = ''
  if (range) {
    rangeParam =
      '&r1=' + (range.getRow() - 1)
      + '&r2=' + range.getLastRow()
      + '&c1=' + (range.getColumn() - 1)
      + '&c2=' + range.getLastColumn()
  }
  if (sheet) {
    sheetParam = '&gid=' + sheet.getSheetId()
  }
  var exportUrl = url.replace(/\/edit.*$/, '')
      + '/export?exportFormat=pdf&format=pdf'
      + '&size=LETTER'
      + '&portrait=true'
      + '&fitw=false'      
      + '&top_margin=0.75'              
      + '&bottom_margin=0.75'          
      + '&left_margin=0.7'            
      + '&right_margin=0.7'          
      + '&sheetnames=false&printtitle=false'
      + '&pagenum=false'
      + '&gridlines=false'
      + '&fzr=FALSE'      
      + sheetParam
      + rangeParam
     
  Logger.log('exportUrl=' + exportUrl)
  var response = UrlFetchApp.fetch(exportUrl, {
    headers: {
      Authorization: 'Bearer ' +  ScriptApp.getOAuthToken(),
    },
  })
 
  return response.getBlob()
}
function exportAllSheetsAsSeparatePDFs() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet()
  var files = []
 
 
  /*spreadsheet.getSheets().forEach(function (sheet) {
    spreadsheet.setActiveSheet(sheet)
   
    var blob = _getAsBlob(spreadsheet.getUrl(), sheet)
    var fileName = sheet.getName()
    blob = blob.setName(fileName)
    var pdfFile = DriveApp.createFile(blob)
   
    files.push({
      url: pdfFile.getUrl(),
      name: fileName,
    })
   
    Utilities.sleep(2000);
  })*/
 
  var numbofsheet=spreadsheet.getNumSheets();// check how many sheets in the spreadsheet
 
  //mirar si la carpeta ja existeix
  var parent = DriveApp.getRootFolder();
  var folders = parent.getFoldersByName("PDFsGenerats");
  while (folders.hasNext()) {
    var folder = folders.next();
  }
 
  //si carpeta no existeix, crear-la
  if(folder==null){

    var folder = DriveApp.createFolder("PDFsGenerats");
  }
 
  //mirar si és el primer cop
  if(PropertiesService.getScriptProperties().getProperty('primercop') == 'false'){
    numbofsheet=PropertiesService.getScriptProperties().getProperty('seguirFull');
  }

  for (pa=numbofsheet-1;pa>0;--pa){
    spreadsheet.setActiveSheet(spreadsheet.getSheets()[pa]);
    var blob = _getAsBlob(spreadsheet.getUrl(), spreadsheet.getSheets()[pa])
    var fileName = spreadsheet.getSheets()[pa].getName() + ".pdf"
    blob = blob.setName(fileName)
    var pdfFile = DriveApp.createFile(blob)
   
    //afegeix fitxer a la carpeta
    folder.addFile(pdfFile);
   
    //esborra el fitxer de la carpeta root
    var pull = DriveApp.getRootFolder();
    pull.removeFile(pdfFile);


   
    files.push({
      url: pdfFile.getUrl(),
      name: fileName,
    })
   
    Utilities.sleep(2000);// pause in the loop for 200 milliseconds
  }
                                 
 
  const htmlOutput = HtmlService
    .createHtmlOutput('<p>Click to open PDF files</p>'
      + '<ul>'
      + files.reduce(function (prev, file) {
        prev += '<li><a href="' + file.url + '" target="_blank">' + file.name + '</a></li>'
        return prev
      }, '')
      + '</ul>')
    .setWidth(300)
    .setHeight(150)
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Export Successful')
}
function exportCurrentSheetAsPDF() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet()
  var currentSheet = SpreadsheetApp.getActiveSheet()
 
  var blob = _getAsBlob(spreadsheet.getUrl(), currentSheet)
  _exportBlob(blob, currentSheet.getName())
}
function exportPartAsPDF(predefinedRanges) {
  var ui = SpreadsheetApp.getUi()
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet()
 
  var selectedRanges
  var fileSuffix
  if (predefinedRanges) {
    selectedRanges = predefinedRanges
    fileSuffix = '-predefined'
  } else {
    var activeRangeList = spreadsheet.getActiveRangeList()
    if (!activeRangeList) {
      ui.alert('Please select at least one range to export')
      return
    }
    selectedRanges = activeRangeList.getRanges()
    fileSuffix = '-selected'
  }
 
  if (selectedRanges.length === 1) {
    // special export with formatting
    var currentSheet = selectedRanges[0].getSheet()
    var blob = _getAsBlob(spreadsheet.getUrl(), currentSheet, selectedRanges[0])
   
    var fileName = spreadsheet.getName() + fileSuffix
    _exportBlob(blob, fileName)
    return
  }
 
  var tempSpreadsheet = SpreadsheetApp.create(spreadsheet.getName() + fileSuffix)
  var tempSheets = tempSpreadsheet.getSheets()
  var sheet1 = tempSheets.length > 0 ? tempSheets[0] : undefined
  SpreadsheetApp.setActiveSpreadsheet(tempSpreadsheet)
 
  for (var i = 0; i < selectedRanges.length; i++) {
    var selectedRange = selectedRanges[i]
    var originalSheet = selectedRange.getSheet()
    var originalSheetName = originalSheet.getName()
   
    var destSheet = tempSpreadsheet.getSheetByName(originalSheetName)
    if (!destSheet) {
      destSheet = tempSpreadsheet.insertSheet(originalSheetName)
    }
   
    Logger.log('a1notation=' + selectedRange.getA1Notation())
    var destRange = destSheet.getRange(selectedRange.getA1Notation())
    destRange.setValues(selectedRange.getValues())
    destRange.setTextStyles(selectedRange.getTextStyles())
    destRange.setBackgrounds(selectedRange.getBackgrounds())
    destRange.setFontColors(selectedRange.getFontColors())
    destRange.setFontFamilies(selectedRange.getFontFamilies())
    destRange.setFontLines(selectedRange.getFontLines())
    destRange.setFontStyles(selectedRange.getFontStyles())
    destRange.setFontWeights(selectedRange.getFontWeights())
    destRange.setHorizontalAlignments(selectedRange.getHorizontalAlignments())
    destRange.setNumberFormats(selectedRange.getNumberFormats())
    destRange.setTextDirections(selectedRange.getTextDirections())
    destRange.setTextRotations(selectedRange.getTextRotations())
    destRange.setVerticalAlignments(selectedRange.getVerticalAlignments())
    destRange.setWrapStrategies(selectedRange.getWrapStrategies())
  }
 
  // remove empty Sheet1
  if (sheet1) {
    Logger.log('lastcol = ' + sheet1.getLastColumn() + ',lastrow=' + sheet1.getLastRow())
    if (sheet1 && sheet1.getLastColumn() === 0 && sheet1.getLastRow() === 0) {
      tempSpreadsheet.deleteSheet(sheet1)
    }
  }
 
  exportAsPDF()
  SpreadsheetApp.setActiveSpreadsheet(spreadsheet)
  DriveApp.getFileById(tempSpreadsheet.getId()).setTrashed(true)
}
function exportNamedRangesAsPDF() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet()
  var allNamedRanges = spreadsheet.getNamedRanges()
  var toPrintNamedRanges = []
  for (var i = 0; i < allNamedRanges.length; i++) {
    var namedRange = allNamedRanges[i]
    if (/^print_area_.*$/.test(namedRange.getName())) {
      Logger.log('found named range ' + namedRange.getName())
      toPrintNamedRanges.push(namedRange.getRange())
    }
  }
  if (toPrintNamedRanges.length === 0) {
    SpreadsheetApp.getUi().alert('No print areas found. Please add at least one \'print_area_1\' named range in the menu Data > Named ranges.')
    return
  } else {
    toPrintNamedRanges.sort(function (a, b) {
      return a.getSheet().getIndex() - b.getSheet().getIndex()
    })
    exportPartAsPDF(toPrintNamedRanges)
  }
}
